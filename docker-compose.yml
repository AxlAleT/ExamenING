services:
  # MySQL Database Service
  mysql_db:
    image: mysql:8.0
    container_name: datawarehouse_mysql_prod
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      MYSQL_DATABASE: ordersdb
    ports:
      - "3307:3306"
    volumes:
      - db_data_prod:/var/lib/mysql
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD:-secure_password_123}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - datawarehouse_network
    restart: unless-stopped

  # Redis Service for Celery and Caching
  redis:
    image: redis:7-alpine
    container_name: datawarehouse_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - datawarehouse_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: datawarehouse_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - web
    networks:
      - datawarehouse_network
    restart: unless-stopped

  # Django Web Application (Production)
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: datawarehouse_web_prod
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./logs:/app/logs
    environment:
      - DEBUG=0
      - DB_HOST=mysql_db
      - DB_PORT=3306
      - DB_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
    depends_on:
      mysql_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "wait-for-it mysql_db:3306 --timeout=60 --strict -- 
             python manage.py migrate &&
             python manage.py migrate --database=olapdb &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 dataWarehouse.wsgi:application"
    networks:
      - datawarehouse_network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: datawarehouse_celery_worker_prod
    volumes:
      - media_volume:/app/media
      - ./logs:/app/logs
    environment:
      - DEBUG=0
      - DB_HOST=mysql_db
      - DB_PORT=3306
      - DB_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    depends_on:
      mysql_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "wait-for-it mysql_db:3306 --timeout=60 --strict -- 
             wait-for-it redis:6379 --timeout=60 --strict -- 
             celery -A dataWarehouse worker --loglevel=info"
    networks:
      - datawarehouse_network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: datawarehouse_celery_beat_prod
    volumes:
      - media_volume:/app/media
      - ./logs:/app/logs
    environment:
      - DEBUG=0
      - DB_HOST=mysql_db
      - DB_PORT=3306
      - DB_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    depends_on:
      mysql_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "wait-for-it mysql_db:3306 --timeout=60 --strict -- 
             wait-for-it redis:6379 --timeout=60 --strict -- 
             celery -A dataWarehouse beat --loglevel=info"
    networks:
      - datawarehouse_network
    restart: unless-stopped

networks:
  datawarehouse_network:
    driver: bridge

volumes:
  db_data_prod:
  redis_data_prod:
  static_volume:
  media_volume:
